AWSTemplateFormatVersion: 2010-09-09
Description: MultiAZ VPC Environment with Application Loadbalancer for ECS Tasks
Parameters:
  VPC1CIDR:
    Description: CIDR Block for the VPC1
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  VPC2CIDR:
    Description: CIDR Block for the VPC2
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PublicSubnet1CIDR:
    Description: CIDR Block for VPC1 - Public Subnet 1
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PrivateSubnet1CIDR:
    Description: CIDR Block for VPC2 - Private Subnet 2
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PublicSubnet2CIDR:
    Description: CIDR Block for VPC2 - Private Subnet 2
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PrivateSubnet2CIDR:
    Description: CIDR Block for VPC2 - Private Subnet 2
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
Mappings:
  RegionAMIMap:
    us-west-2:
      AMI: ami-0721c9af7b9b75114
    ap-northeast-1:
      AMI: ami-06631ebafb3ae5d34
    ap-southeast-1:
      AMI: ami-018c1c51c7a13e363

Resources:

  VPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPC1CIDR
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public
  VPC2:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPC2CIDR
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC2
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Private
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Private
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Private
  InternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public
  AttachIGW1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1
  InternetGateway2:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW2
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public
  AttachIGW2:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref InternetGateway2
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId:
         Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NATGW1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT-EIP1
        - Key: Purpose
          Value: Demo
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId:
         Ref: PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NATGW1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public
  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT-EIP2
        - Key: Purpose
          Value: Demo

  PublicRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRT1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public Subnet
  PublicRoute1IGW:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRT1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Private Subnet
  PrivateRoute1NatGW:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PublicRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRT2
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Public Subnet
  PublicRoute2IGW:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway2
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRT2
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Private Subnet
  PrivateRoute2NatGW:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  HTTPSecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC1-HTTPSG

  HTTPSecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC2-HTTPSG

  # NLB Settings
  NetworkLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: network
      Scheme: internal
      IpAddressType: ipv4
      Subnets:
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC2-NLB
  NLBListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: NLBTargetGroup1
      LoadBalancerArn:
          Ref: NetworkLoadBalancer
      Port: 80
      Protocol: TCP
  NLBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VPC2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Targets:
        - Id: !Ref PrivateInstance2
          Port: 80
  # VPC Service 
  VPC2EndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties: 
      AcceptanceRequired: false
      NetworkLoadBalancerArns: 
        - !Ref NetworkLoadBalancer
# Can't get the service name in cloudformation templates. so VPCEndpoint is created via cli or management console after creating stack.
#  VPC1PrivateLinkEndpoint:
#    Type: AWS::EC2::VPCEndpoint
#    Properties:
#      ServiceName: 
#      SubnetIds:
#        - !Ref PrivateSubnet1
#      VpcId: !Ref VPC1
#      VpcEndpointType: Interface
#      SecurityGroupIds:
#        - !Ref HTTPSecurityGroup1
#      PrivateDnsEnabled: true
  # EC2 Instances Settings
  EC2SSMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2SSMRole

  EC2SSMRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn:
      - EC2SSMRole
    Properties:
      Roles:
        - !Ref EC2SSMRole
      InstanceProfileName: !Sub ${AWS::StackName}-EC2SSMRole
  PrivateInstance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionAMIMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2SSMRoleInstanceProfile
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref HTTPSecurityGroup1
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateInstance1
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Private
  PrivateInstance2:
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "php-config"
        php-config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: |
                <?php
                  # Retrieve Instance metadata
                  $url = "http://169.254.169.254/latest/meta-data/instance-id";
                  $instance_id = file_get_contents($url);
                  $url = "http://169.254.169.254/latest/meta-data/local-ipv4";
                  $local_ip = file_get_contents($url);
                ?>
                <html>
                <head><title>Hello!</title></html>
                <body>
                    <h1>PrivateLink Demo</h1><br/>
                    <h1>Instance ID: <?php echo $instance_id; ?></h1>
                    <h1>Local IP: <?php echo $local_ip; ?></h1>
                    <p>This information has been retrieved from the Instance Metadata service.</p>
                </body>
                </html>
              mode: '000644'
              owner: apache
              group: apache
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !FindInMap [RegionAMIMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2SSMRoleInstanceProfile
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref HTTPSecurityGroup2
      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateInstance2
        - Key: Purpose
          Value: Demo
        - Key: Network
          Value: Private
      UserData: 
        'Fn::Base64': 
          !Sub | 
            #!/bin/bash -ex 
            # Update 
            yum update -y 
 
            # Setting Up Configs 
            /opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r PrivateInstance2 --region ${AWS::Region}

            # send signal 
            /opt/aws/bin/cfn-signal -e $? '${DemoEC2InstanceWaitConditionHandle}' 
  DemoEC2InstanceWaitConditionHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  DemoEC2InstanceWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn:
      - PrivateInstance2
    Properties:
      Count: '1'
      Handle: !Ref DemoEC2InstanceWaitConditionHandle
      Timeout: 300

Outputs:
  Instance1PrivateIp:
    Value: !GetAtt PrivateInstance1.PrivateIp
  Instance2PrivateIp:
    Value: !GetAtt PrivateInstance2.PrivateIp
  Instance1URL:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${PrivateInstance1}"
  NLBEndpoint:
    Value: !GetAtt NetworkLoadBalancer.DNSName
    Description: NLBEndopoint
  VPC2EndpointService:
    Value: !Ref VPC2EndpointService
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
  SecurityGroup1:
    Value: !Ref HTTPSecurityGroup1
  VPC1:
    Value: !Ref VPC1

